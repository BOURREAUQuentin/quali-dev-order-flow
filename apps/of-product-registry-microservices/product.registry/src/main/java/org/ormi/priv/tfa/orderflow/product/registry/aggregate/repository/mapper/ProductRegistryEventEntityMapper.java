package org.ormi.priv.tfa.orderflow.product.registry.aggregate.repository.mapper;

import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.factory.Mappers;
import org.ormi.priv.tfa.orderflow.lib.event.sourcing.aggregate.mapper.EventIdMapper;
import org.ormi.priv.tfa.orderflow.lib.publishedlanguage.event.ProductRegistered;
import org.ormi.priv.tfa.orderflow.lib.publishedlanguage.event.ProductRemoved;
import org.ormi.priv.tfa.orderflow.lib.publishedlanguage.event.ProductUpdated;
import org.ormi.priv.tfa.orderflow.product.registry.aggregate.repository.model.ProductRegisteredEventEntity;
import org.ormi.priv.tfa.orderflow.product.registry.aggregate.repository.model.ProductRemovedEventEntity;
import org.ormi.priv.tfa.orderflow.product.registry.aggregate.repository.model.ProductUpdatedEventEntity;

/**
 * Mapper interface for bidirectional conversion between business event objects
 * (ProductRegistered, ProductUpdated, ProductRemoved) and their respective 
 * database entities (ProductRegisteredEventEntity, ProductUpdatedEventEntity, 
 * ProductRemovedEventEntity)
 */
@Mapper(uses = {EventIdMapper.class, ProductRegistryEventPayloadMapper.class})
public interface ProductRegistryEventEntityMapper {
    /**
     * Singleton instance of the mapper, automatically generated by MapStruct
     */
    ProductRegistryEventEntityMapper INSTANCE = Mappers.getMapper(ProductRegistryEventEntityMapper.class);

    /**
     * Maps a ProductRegistered business event to its corresponding database entity
     *
     * @param evt the ProductRegistered event to be converted
     * @return a ProductRegisteredEventEntity for database storage
     */
    @Mapping(target = "id", ignore = true) // id is generated by the database
    @Mapping(target = "eventId", source = "id", qualifiedByName = "eventIdToString")
    @Mapping(target = "eventType", source = "eventType")
    @Mapping(target = "aggregateRootId", source = "aggregateId")
    @Mapping(target = "version", source = "version")
    @Mapping(target = "timestamp", source = "timestamp")
    @Mapping(target = "payload", source = "payload", qualifiedByName = "productRegisteredEventPayloadToEntity")
    ProductRegisteredEventEntity toEntity(ProductRegistered evt);

    /**
     * Maps a ProductRegisteredEventEntity from the database to a ProductRegistered business event
     *
     * @param entity the ProductRegisteredEventEntity to be converted
     * @return a ProductRegistered business event object
     */
    @Mapping(target = "id", source = "eventId", qualifiedByName = "toEventId")
    @Mapping(target = "eventType", ignore = true)
    @Mapping(target = "aggregateId", source = "aggregateRootId")
    @Mapping(target = "version", source = "version")
    @Mapping(target = "timestamp", source = "timestamp")
    @Mapping(target = "payload", source = "payload", qualifiedByName = "productRegisteredEventPayloadToEvent")
    ProductRegistered toEvent(ProductRegisteredEventEntity entity);

    /**
     * Maps a ProductUpdated business event to its corresponding database entity
     *
     * @param evt the ProductUpdated event to be converted
     * @return a ProductUpdatedEventEntity for database storage
     */
    @Mapping(target = "id", ignore = true)
    @Mapping(target = "eventId", source = "id", qualifiedByName = "eventIdToString")
    @Mapping(target = "eventType", source = "eventType")
    @Mapping(target = "aggregateRootId", source = "aggregateId")
    @Mapping(target = "version", source = "version")
    @Mapping(target = "timestamp", source = "timestamp")
    @Mapping(target = "payload", source = "payload", qualifiedByName = "productUpdatedEventEntityToEntity")
    ProductUpdatedEventEntity toEntity(ProductUpdated evt);

    /**
     * Maps a ProductUpdatedEventEntity from the database to a ProductUpdated business event
     *
     * @param entity the ProductUpdatedEventEntity to be converted
     * @return a ProductUpdated business event object
     */
    @Mapping(target = "id", source = "eventId", qualifiedByName = "toEventId")
    @Mapping(target = "eventType", ignore = true)
    @Mapping(target = "aggregateId", source = "aggregateRootId")
    @Mapping(target = "version", source = "version")
    @Mapping(target = "timestamp", source = "timestamp")
    @Mapping(target = "payload", source = "payload", qualifiedByName = "productUpdatedEventPayloadToEvent")
    ProductUpdated toEvent(ProductUpdatedEventEntity entity);

    /**
     * Maps a ProductRemoved business event to its corresponding database entity
     *
     * @param evt the ProductRemoved event to be converted
     * @return a ProductRemovedEventEntity for database storage
     */
    @Mapping(target = "id", ignore = true)
    @Mapping(target = "eventId", source = "id", qualifiedByName = "eventIdToString")
    @Mapping(target = "eventType", source = "eventType")
    @Mapping(target = "aggregateRootId", source = "aggregateId")
    @Mapping(target = "version", source = "version")
    @Mapping(target = "timestamp", source = "timestamp")
    @Mapping(target = "payload", source = "payload", qualifiedByName = "productRemovedEventPayloadToEntity")
    ProductRemovedEventEntity toEntity(ProductRemoved evt);

    /**
     * Maps a ProductRemovedEventEntity from the database to a ProductRemoved business event
     *
     * @param entity the ProductRemovedEventEntity to be converted
     * @return a ProductRemoved business event object
     */
    @Mapping(target = "id", source = "eventId", qualifiedByName = "toEventId")
    @Mapping(target = "eventType", ignore = true)
    @Mapping(target = "aggregateId", source = "aggregateRootId")
    @Mapping(target = "version", source = "version")
    @Mapping(target = "timestamp", source = "timestamp")
    @Mapping(target = "payload", source = "payload", qualifiedByName = "productRemovedEventPayloadToEvent")
    ProductRemoved toEvent(ProductRemovedEventEntity entity);
}
